// Form elements
//
// We use jade mixins for the form elements. You can find examples of mixins, arrays and styles for it in the <b>helpers/components/forms</b> folder.
//
// Styleguide 2.0

// Text input
//
// Input type text with dl structure. In jade we define arrays with classes for input, mixin(form_element) and then invoke it. You should create all styles for the form elements in <b>assets/sass/_forms.scss</b> file.
//
// markup:
// //- arrays for form elements
// - var default_field = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod', elem_class:'default_mod'}
// - var default_field_hidden = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod hline_hide_mod', elem_class:'default_mod'}
// - var second_field = {block_class_mod:'form_cell_v2_mod',class_mod:'form_v2_mod', elem_class:'default_mod'}
// //- mixin for form elements
// mixin form_element(config)
//  //- default values
//  - config.class_array = config.class_array || {}
//  - config.class_array.block_class_mod = config.class_array.block_class_mod || ''
//  - config.class_array.class_mod = config.class_array.class_mod || ''
//  - config.class_array.elem_class = config.class_array.elem_class || ''
//  - config.add_class = config.add_class || ''
//  - config.placeholder = config.placeholder || ''
//  if !config.id
//   - config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  else
//   - config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
//   dl.form_cell(class=config.class_array.block_class_mod)
//    dt.form_cell_title(class=config.class_array.class_mod)
//     label(for=config.id) #{config.title}
//    dd.form_field_wrap(class=config.class_array.class_mod)
//     if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel'
//      if config.value
//       input.form_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//      else
//       input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//     if config.type === 'textarea'
//      textarea.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
//      block
//     if config.type === 'file'
//      input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//      .form_field_file_field
//       span.form_field_file_text #{config.title}
//       span.form_field_file_butt Choose File
//     if config.type === 'select'
//      select.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
//       each option in config.options
//        option(value=option)= option
//      block
//  if config.type === 'checkbox' || config.type === 'radio'
//   label.radio_check(class=config.class_array.block_class_mod)
//    if config.checked
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
//    else
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
//    span.radio_check_text(class=config.class_array.class_mod) #{config.title}
// //- create text input
// +form_element({
// 	type: 'text',
// 	class_array: default_field,
// 	title: 'Input with title',
// 	id: 'text_1',
// 	placeholder: 'Placeholder text'
// })
// +form_element({
// 	type: 'text',
// 	class_array: second_field,
// 	title: 'Input with horizontal layout',
// 	id: 'text_2',
// 	placeholder: 'Placeholder text'
// })
// +form_element({
// 	type: 'text',
// 	class_array: default_field_hidden,
// 	title: 'Input without title',
// 	id: 'text_3',
// 	placeholder: 'Input without title'
// })
// +form_element({
// 	type: 'text',
// 	class_array: default_field_hidden,
// 	title: 'Input with icon',
// 	id: 'text_4',
// 	placeholder: 'With right icon',
// 	add_class: 'right_icon_mod'
// })
//  a.input_icon.right_mod.search_mod(href="#") search
// +form_element({
// 	type: 'text',
// 	class_array: default_field_hidden,
// 	title: 'Input with icon',
// 	id: 'text_5',
// 	placeholder: 'With left icon',
// 	add_class: 'left_icon_mod'
// })
//  a.input_icon.left_mod.search_mod(href="#") search
//
// Styleguide 2.1

%form_field_default {
	display: block;
	width: 100%;
	height: $input_height;
	padding: $input_offset;
	font-size: $input_font_size;
	font-family: $font_1;
	color: $input_text_color;
	border: 1px solid $input_border_color;
	border-radius: $input_radius;

	&::-webkit-input-placeholder {
		color: $input_placeholder_color;
	}

	&::-moz-placeholder {
		color: $input_placeholder_color;
	}
	&:-ms-input-placeholder {
		color: $input_placeholder_color;
	}

	&.right_icon_mod {
		padding-right: 4rem;
	}

	&.left_icon_mod {
		padding-left: 4rem;
	}
}

%form_field_default_hover {
}

%form_field_default_active {
	border: 1px solid $input_border_color_active;
	&::-webkit-input-placeholder {
		color: transparent;
	}

	&::-moz-placeholder {
		color: transparent;
	}
	&:-ms-input-placeholder {
		color: transparent;
	}
}

.form_cell {
	&.hidden_field {
		display: none;
	}

	&.form_cell_v1_mod {
		width: 50%;
		min-width: 24rem;
		margin: 3rem 0 0;

		&:first-child {
			margin: 0;
		}
	}

	&.form_cell_v2_mod {
		display:flex;
		align-items:center;
		width: 50%;
		min-width: 34rem;
		margin: 3rem 0 0;

		&:first-child {
			margin: 0;
		}
	}
}

.form_cell_title {

	&.hline_hide_mod {
		display: none;
	}
	&.form_v1_mod {
		margin: 0 0 .4rem;
	}
	&.form_v2_mod {
		margin: 0 1rem 0 0;
		flex:0 0 auto;
	}
}

.form_field_wrap {
	position: relative;

	&.form_v2_mod {
		flex:1 1 auto;
	}
}

.form_field:not(.select_rediz_coosen) {
	&.default_mod {
		@extend %form_field_default;

		&:focus {
			@extend %form_field_default_active;
		}
	}
}

.input_icon {
	position: absolute;
	font-size: 0;
	top: 50%;
	width: 2rem;
	height: 2rem;
	margin-top: -1rem;

	&.right_mod {
		right: 1rem;
	}

	&.left_mod {
		left: 1rem;
	}

	&.search_mod {
		background: url(../i/icons/search.svg);
		background-size:100% 100%;
	}
}

// Textarea
//
// Textarea with dl structure. In jade we define arrays with classes for input, mixin(form_element) and then invoke it. You should create all styles for the form elements in <b>assets/sass/_forms.scss</b> file.
//
// markup:
// //- arrays for form elements
// - var default_field = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod', elem_class:'default_mod'}
// - var default_field_hidden = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod hline_hide_mod', elem_class:'default_mod'}
// //- mixin for form elements
// mixin form_element(config)
//  //- default values
//  - config.class_array = config.class_array || {}
//  - config.class_array.block_class_mod = config.class_array.block_class_mod || ''
//  - config.class_array.class_mod = config.class_array.class_mod || ''
//  - config.class_array.elem_class = config.class_array.elem_class || ''
//  - config.add_class = config.add_class || ''
//  - config.placeholder = config.placeholder || ''
//  if !config.id
//   - config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  else
//   - config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
//   dl.form_cell(class=config.class_array.block_class_mod)
//    dt.form_cell_title(class=config.class_array.class_mod)
//     label(for=config.id) #{config.title}
//    dd.form_field_wrap(class=config.class_array.class_mod)
//     if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel'
//      if config.value
//       input.form_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//      else
//       input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//     if config.type === 'textarea'
//      textarea.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
//      block
//     if config.type === 'file'
//      input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//      .form_field_file_field
//       span.form_field_file_text #{config.title}
//       span.form_field_file_butt Choose File
//     if config.type === 'select'
//      select.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
//       each option in config.options
//        option(value=option)= option
//      block
//  if config.type === 'checkbox' || config.type === 'radio'
//   label.radio_check(class=config.class_array.block_class_mod)
//    if config.checked
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
//    else
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
//    span.radio_check_text(class=config.class_array.class_mod) #{config.title}
// //- create textarea
// +form_element({
// 	type: 'textarea',
// 	class_array: default_field,
// 	title: 'Textarea with title',
// 	id: 'textarea_1',
// 	placeholder: 'Placeholder text',
// 	add_class: 'textarea_mod_1'
// })
// +form_element({
// 	type: 'textarea',
// 	class_array: default_field_hidden,
// 	title: 'Textarea without title',
// 	id: 'textarea_1',
// 	placeholder: 'Textarea without title',
// 	add_class: 'textarea_mod_1'
// })
//
// Styleguide 2.2

%form_field_default {
	display: block;
	width: 100%;
	height: $input_height;
	padding: $input_offset;
	font-size: $input_font_size;
	font-family: $font_1;
	color: $input_text_color;
	border: 1px solid $input_border_color;
	border-radius: $input_radius;

	&::-webkit-input-placeholder {
		color: $input_placeholder_color;
	}

	&::-moz-placeholder {
		color: $input_placeholder_color;
	}
	&:-ms-input-placeholder {
		color: $input_placeholder_color;
	}

	&.right_icon_mod {
		padding-right: 4rem;
	}

	&.left_icon_mod {
		padding-left: 4rem;
	}
}

%form_field_default_hover {
}

%form_field_default_active {
	border: 1px solid $input_border_color_active;
	&::-webkit-input-placeholder {
		color: transparent;
	}

	&::-moz-placeholder {
		color: transparent;
	}
	&:-ms-input-placeholder {
		color: transparent;
	}
}

.form_cell {
	&.hidden_field {
		display: none;
	}

	&.form_cell_v1_mod {
		width: 50%;
		min-width: 24rem;
		margin: 3rem 0 0;

		&:first-child {
			margin: 0;
		}
	}
}

.form_cell_title {

	&.hline_hide_mod {
		display: none;
	}
	&.form_v1_mod {
		margin: 0 0 .4rem;
	}
}

.form_field_wrap {
	position: relative;

	&.form_v1_mod {
	}
}

.form_field:not(.select_rediz_coosen) {
	&.default_mod {
		@extend %form_field_default;

		&:focus {
			@extend %form_field_default_active;
		}
	}
	&.textarea_mod_1 {
		height: 20rem;
		padding:1rem;
	}
}

// Checkbox
//
// Checkbox with custom styling. In jade we define arrays with classes for input, mixin(form_element) and then invoke it. You should create all styles for the form elements in <b>assets/sass/_forms.scss</b> file.
//
// markup:
// //- arrays for form elements
// - var default_checkbox = {block_class_mod:'check_1_mod',class_mod:'check_1_mod', elem_class:'check_1_mod'}
// - var default_radio = {block_class_mod:'radio_1_mod',class_mod:'radio_1_mod', elem_class:'radio_1_mod'}
// //- mixin for form elements
// mixin form_element(config)
//  //- default values
//  - config.class_array = config.class_array || {}
//  - config.class_array.block_class_mod = config.class_array.block_class_mod || ''
//  - config.class_array.class_mod = config.class_array.class_mod || ''
//  - config.class_array.elem_class = config.class_array.elem_class || ''
//  - config.add_class = config.add_class || ''
//  - config.placeholder = config.placeholder || ''
//  if !config.id
//   - config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  else
//   - config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
//   dl.form_cell(class=config.class_array.block_class_mod)
//    dt.form_cell_title(class=config.class_array.class_mod)
//     label(for=config.id) #{config.title}
//    dd.form_field_wrap(class=config.class_array.class_mod)
//     if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel'
//      if config.value
//       input.form_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//      else
//       input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//     if config.type === 'textarea'
//      textarea.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
//      block
//     if config.type === 'file'
//      input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//      .form_field_file_field
//       span.form_field_file_text #{config.title}
//       span.form_field_file_butt Choose File
//     if config.type === 'select'
//      select.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
//       each option in config.options
//        option(value=option)= option
//      block
//  if config.type === 'checkbox' || config.type === 'radio'
//   label.radio_check(class=config.class_array.block_class_mod)
//    if config.checked
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
//    else
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
//    span.radio_check_text(class=config.class_array.class_mod) #{config.title}
// //- create checkbox
// +form_element({
//  type: 'checkbox',
//  class_array: default_checkbox,
//  title: 'Title of checkbox',
//  name: 'check',
//  checked: false
// })
// +form_element({
//  type: 'checkbox',
//  class_array: default_checkbox,
//  title: 'Title of checkbox with a very long text and you can paste here any text',
//  name: 'check',
//  checked: false
// })
//
// Styleguide 2.3

.radio_check {
	width:50%;
	min-width:30rem;

	margin: 2rem 0 0;

	&:first-child {
		margin: 0;
	}

	&.check_1_mod {
		display: inline-block;
		cursor:pointer;
	}
}

.radio_check_input {
	&.check_1_mod {
		display: none;
	}
}

.radio_check_text {
	&.check_1_mod {
		position: relative;
		display: inline-block;
		padding:0 0 0 3rem;

		&:before,&:after {
			position: absolute;
			top: -.2rem;
			left: 0;
			width: 2rem;
			height: 2rem;
			cursor:pointer;
		}

		&:before {
			content: '';
			border-radius:.2rem;
			border:1px solid $brand_default_color;
		}

		&:after {
			@extend %icon-check:before;

			text-align: center;
			line-height: 20px;
			opacity: 0;
			color:$brand_default_color;
			transition:opacity .3s ease;

			.radio_check_input:checked + & {
				opacity: 1;
			}
		}
	}
}

// Radio
//
// Radio buttons with custom styling. In jade we define arrays with classes for input, mixin(form_element) and then invoke it. You should create all styles for the form elements in <b>assets/sass/_forms.scss</b> file.
//
// markup:
// //- arrays for form elements
// - var default_checkbox = {block_class_mod:'check_1_mod',class_mod:'check_1_mod', elem_class:'check_1_mod'}
// - var default_radio = {block_class_mod:'radio_1_mod',class_mod:'radio_1_mod', elem_class:'radio_1_mod'}
// //- mixin for form elements
// mixin form_element(config)
//  //- default values
//  - config.class_array = config.class_array || {}
//  - config.class_array.block_class_mod = config.class_array.block_class_mod || ''
//  - config.class_array.class_mod = config.class_array.class_mod || ''
//  - config.class_array.elem_class = config.class_array.elem_class || ''
//  - config.add_class = config.add_class || ''
//  - config.placeholder = config.placeholder || ''
//  if !config.id
//   - config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  else
//   - config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
//   dl.form_cell(class=config.class_array.block_class_mod)
//    dt.form_cell_title(class=config.class_array.class_mod)
//     label(for=config.id) #{config.title}
//    dd.form_field_wrap(class=config.class_array.class_mod)
//     if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel'
//      if config.value
//       input.form_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//      else
//       input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//     if config.type === 'textarea'
//      textarea.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
//      block
//     if config.type === 'file'
//      input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//      .form_field_file_field
//       span.form_field_file_text #{config.title}
//       span.form_field_file_butt Choose File
//     if config.type === 'select'
//      select.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
//       each option in config.options
//        option(value=option)= option
//      block
//  if config.type === 'checkbox' || config.type === 'radio'
//   label.radio_check(class=config.class_array.block_class_mod)
//    if config.checked
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
//    else
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
//    span.radio_check_text(class=config.class_array.class_mod) #{config.title}
// //- create radio button
// +form_element({
//  type: 'radio',
//  class_array: default_radio,
//  title: 'Title of the radio',
//  name: 'radio',
//  checked: false
// })
// +form_element({
//  type: 'radio',
//  class_array: default_radio,
//  title: 'Title of the radio with a very long text and you can paste here any text',
//  name: 'radio',
//  checked: true
// })
//
// Styleguide 2.4

.radio_check {
	width:50%;
	min-width:30rem;

	margin: 2rem 0 0;

	&:first-child {
		margin: 0;
	}

	&.radio_1_mod {
		display: inline-block;
		cursor:pointer;
	}
}

.radio_check_input {
	&.radio_1_mod {
		display: none;
	}
}

.radio_check_text {
	&.radio_1_mod {
		position: relative;
		display: inline-block;
		padding:0 0 0 3rem;

		&:before {
			content: '';
			position: absolute;
			top: -.2rem;
			left: 0;
			width: 2rem;
			height: 2rem;
			border-radius:100%;
			border:2px solid $brand_default_color;
			cursor:pointer;
		}

		&:after {
			content:'';
			position: absolute;
			top: .3rem;
			left: .5rem;
			width: 1rem;
			height: 1rem;
			border-radius: 100%;
			background: $brand_default_color;
			transform:scale(0);
			transition:transform .3s ease;

			.radio_check_input:checked + & {
				transform:scale(1);
			}
		}
	}
}

// Select
//
// Select with custom styling. In jade we define arrays with classes for input, mixin(form_element) and then invoke it. You should create all styles for the form elements in <b>assets/sass/_forms.scss</b> file. We use <a href="https://harvesthq.github.io/chosen/" target="_blank">chosen</a> jQuery plugin for select styling.
//
// markup:
// //- arrays for form elements
// - var default_field = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod', elem_class:'default_mod'}
// - var default_field_hidden = {block_class_mod:'form_cell_v1_mod',class_mod:'form_v1_mod hline_hide_mod', elem_class:'default_mod'}
// //- mixin for form elements
// mixin form_element(config)
//  //- default values
//  - config.class_array = config.class_array || {}
//  - config.class_array.block_class_mod = config.class_array.block_class_mod || ''
//  - config.class_array.class_mod = config.class_array.class_mod || ''
//  - config.class_array.elem_class = config.class_array.elem_class || ''
//  - config.add_class = config.add_class || ''
//  - config.placeholder = config.placeholder || ''
//  if !config.id
//   - config.id = config.title.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  else
//   - config.id = config.id.replace(/\s/g, '_').replace(/[.,:;(){}/?!@#$%&*]/g, '')
//  if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel' || config.type === 'textarea' || config.type === 'select' || config.type === 'file'
//   dl.form_cell(class=config.class_array.block_class_mod)
//    dt.form_cell_title(class=config.class_array.class_mod)
//     label(for=config.id) #{config.title}
//    dd.form_field_wrap(class=config.class_array.class_mod)
//     if config.type === 'text' || config.type === 'password' || config.type === 'email' || config.type === 'tel'
//      if config.value
//       input.form_field(value=config.value type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//      else
//       input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//       block
//     if config.type === 'textarea'
//      textarea.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder) #{config.value}
//      block
//     if config.type === 'file'
//      input.form_field(type=config.type id=config.id class='#{config.class_array.elem_class} #{config.add_class}' placeholder=config.placeholder)
//      .form_field_file_field
//       span.form_field_file_text #{config.title}
//       span.form_field_file_butt Choose File
//     if config.type === 'select'
//      select.form_field(id=config.id class='#{config.class_array.elem_class} #{config.add_class}' data-placeholder=config.placeholder)
//       each option in config.options
//        option(value=option)= option
//      block
//  if config.type === 'checkbox' || config.type === 'radio'
//   label.radio_check(class=config.class_array.block_class_mod)
//    if config.checked
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}' checked='checked')
//    else
//     input.radio_check_input(name=config.name type=config.type class='#{config.class_array.elem_class} #{config.add_class}')
//    span.radio_check_text(class=config.class_array.class_mod) #{config.title}
// //- create select
// .test_container
//  +form_element({
//  	type: 'select',
//  	class_array: default_field,
//  	title: 'some title',
//  	id: 'select',
//  	options: ['Option 1', 'Option 2', 'Option 3']
//  })
//
// Styleguide 2.5

.test_container {
	min-height: 25rem;
}